{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","className","React","Component","Form","onSubmit","this","props","weatherMethod","type","name","placeholder","Weather","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","async","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAaeA,E,iLATP,OACI,yBAAKC,UAAU,mBACX,2CACA,2D,GALGC,IAAMC,WCaVC,E,iLAXP,OACI,yBAAKH,UAAU,mBACX,0BAAMI,SAAYC,KAAKC,MAAMC,eACzB,2BAAOP,UAAU,cAAcQ,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBACnE,4BAAQV,UAAU,gBAAlB,wB,GANDC,IAAMC,WCgBVS,EAhBC,SAACL,GACb,OACI,6BACKA,EAAMM,MACH,yBAAKZ,UAAU,uBACX,wCAAcM,EAAMM,KAApB,KAA4BN,EAAMO,SAClC,2CAAiBP,EAAMQ,KAAvB,UACA,wCAAcR,EAAMS,SAApB,QACA,sCAAYT,EAAMU,SAG1B,uBAAGhB,UAAU,6BAA6BM,EAAMW,SCRtDC,EAAU,mCAoEDC,E,2MAhEXC,MAAQ,CACJN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAGXC,eAAiB,SAAMC,GAAN,yBAAAC,EAAAC,OAAA,mDACbF,EAAEG,mBACId,EAAOW,EAAEI,OAAOC,SAAShB,KAAKiB,OAFvB,mCAAAL,EAAA,MAKaM,MAAM,qDAAD,OAAsDlB,EAAtD,kBAAoEM,EAApE,mBALlB,cAKHa,EALG,kBAAAP,EAAA,MAMUO,EAAQC,QANlB,OAMHC,EANG,OAQLjB,EAASiB,EAAKC,IAAIlB,QAClBmB,EAAO,IAAIC,MACVC,QAAQrB,GACTsB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEzE,EAAKC,SAAS,CACV5B,KAAMmB,EAAKU,KAAK7B,KAChBF,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKC,IAAIrB,QAClBE,SAAUkB,EAAKU,KAAK5B,SACpBC,OAAQsB,EACRrB,WAAOI,IAnBF,wBAsBT,EAAKqB,SAAS,CACV5B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,4BA5BF,uC,wEAkCb,OACI,yBAAKjB,UAAU,cACX,yBAAKA,UAAU,sBACX,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,CAAMO,cAAeF,KAAKiB,iBAC1B,kBAAC,EAAD,CACIR,KAAMT,KAAKe,MAAMN,KACjBF,KAAMP,KAAKe,MAAMR,KACjBC,QAASR,KAAKe,MAAMP,QACpBE,SAAUV,KAAKe,MAAML,SACrBC,OAAQX,KAAKe,MAAMJ,OACnBC,MAAOZ,KAAKe,MAAMH,e,GAzDxBhB,IAAMC,W,MCKJ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e1800579.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Info extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"info__container\">\r\n                <h2>Weather App</h2>\r\n                <p>Current weather in town</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"form__container\">\r\n                <form onSubmit = {this.props.weatherMethod}>\r\n                    <input className=\"form__input\" type=\"text\" name=\"city\" placeholder=\"Enter town name\"></input>\r\n                    <button className=\"form__button\">Search weather</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div>\r\n            {props.city && \r\n                <div className=\"weather__parameters\">\r\n                    <p>Location: {props.city}, {props.country}</p>\r\n                    <p>Temperature: {props.temp} &#176;C</p>\r\n                    <p>Pressure: {props.pressure} hPa</p>\r\n                    <p>Sunset: {props.sunset}</p>\r\n                </div>\r\n            }\r\n            <p className=\"weather__parameters-error\">{props.error}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport Info from './components/info';\r\nimport Form from './components/form';\r\nimport Weather from './components/weather';\r\n\r\nconst API_KEY = \"b3375d11b45ecae32d24c8effeb3fec3\";\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunset: undefined,\r\n        error: undefined\r\n    }\r\n\r\n    gettingWeather = async(e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n\r\n        if (city) {\r\n            const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n            const data = await api_url.json();\r\n\r\n            var sunset = data.sys.sunset;\r\n            var date = new Date();\r\n            date.setTime(sunset);\r\n            var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n\r\n            this.setState({\r\n                temp: data.main.temp,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                pressure: data.main.pressure,\r\n                sunset: sunset_date,\r\n                error: undefined\r\n            });\r\n        } else {\r\n            this.setState({\r\n                temp: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                pressure: undefined,\r\n                sunset: undefined,\r\n                error: \"Please, enter city name\"\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"weatherApp\">\r\n                <div className=\"weather__container\">\r\n                    <Info/>\r\n                    <div>\r\n                    <Form weatherMethod={this.gettingWeather}/>\r\n                    <Weather\r\n                        temp={this.state.temp}\r\n                        city={this.state.city}\r\n                        country={this.state.country}\r\n                        pressure={this.state.pressure}\r\n                        sunset={this.state.sunset}\r\n                        error={this.state.error}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}